import{r as o,de as f,cT as w,S as p,T as n,dc as y,t as _,a0 as V,a2 as v}from"./index.a831a68c.js";import{s as C}from"./utils.c5d68ceb.js";import{r as b}from"./GroupContainer.e27b7c2f.js";import{f as T,u as H}from"./LayerView.dc56aed3.js";import{i as g}from"./GraphicContainer.b957e03e.js";import{a as d}from"./BaseGraphicContainer.48b0a311.js";import"./Utils.52ce5732.js";import"./number.6e30c64a.js";import"./enums.c60b1dad.js";import"./Texture.799a4527.js";import"./VertexElementDescriptor.2400a91d.js";import"./MaterialKey.9bf60063.js";import"./alignmentUtils.84250e5d.js";import"./definitions.a48e52ac.js";import"./WGLContainer.6c26f111.js";import"./pixelUtils.0c287117.js";import"./VertexArrayObject.47b5a963.js";import"./ProgramTemplate.30511351.js";import"./StyleDefinition.f1dd8ba9.js";import"./config.ded6d251.js";import"./GeometryUtils.b4d0dc88.js";import"./CIMSymbolHelper.49a4dde1.js";import"./BidiEngine.95523203.js";import"./GeometryUtils.f3664fe1.js";import"./normalizeUtilsSync.f68c7e05.js";import"./projectionSupport.5ef1eff5.js";import"./json.8bd707cf.js";import"./FeatureContainer.f0757bf1.js";import"./TileContainer.8cab8d8b.js";import"./visualVariablesUtils.eb44e100.js";import"./visualVariablesUtils.4ccb186b.js";import"./Matcher.7b29957c.js";import"./tileUtils.0d12ad86.js";import"./TileClipper.46fbd347.js";import"./Geometry.f2d62961.js";import"./cimAnalyzer.52b380bb.js";import"./quantizationUtils.d707a317.js";import"./ExpandedCIM.cd816331.js";import"./schemaUtils.5a296482.js";import"./createSymbolSchema.f93af27b.js";import"./MD5.7323a015.js";import"./util.c286b664.js";import"./ComputedAttributeStorage.a96b0cc6.js";import"./centroid.d71a978e.js";import"./vec3f32.ca7a14c1.js";const m="sublayers",l="layerView",I=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends T(H){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const a=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&a.popupTemplate&&(r.popupTemplate=a.popupTemplate)}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):w.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):I}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new g(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const r=new d({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.handles.add([p(()=>s.visible,h=>r.container.visible=h,n),p(()=>r.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else o(this.layer.sublayers)&&this.handles.add(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),_(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new C,r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const h=new d({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.handles.add([s.on("graphic-update",h.graphicUpdateHandler),p(()=>s.visible,u=>h.container.visible=u,n),p(()=>h.updating,()=>this.notifyChange("updating"),n)],l),a.addChild(h.container),this.container.addChild(a),i.push(h)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=V([v("esri.views.2d.layers.MapNotesLayerView2D")],c);const yi=c;export{yi as default};
