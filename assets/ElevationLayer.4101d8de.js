import{s as g,dh as f,eB as w,eC as S,r as p,u,h as $,eD as T,eE as b,eF as L,eG as I,eH as x,f as E,aP as D,U as y,d$ as k,am as m,a0 as a,a1 as o,ec as V,eI as P,eJ as O,a2 as j,eK as A}from"./index.a831a68c.js";import{s as C}from"./ArcGISCachedService.ea105920.js";import"./TilemapCache.00d4084c.js";const M=g.getLogger("esri.core.workers.WorkerHandle");class U{constructor(e,t,s,l,h={}){this._mainMethod=t,this._transferLists=s,this._listeners=[],this._promise=f(e,{...h,schedule:l}).then(d=>{if(this._thread===void 0){this._thread=d,this._promise=null,h.hasInitialize&&this.broadcast({},"initialize");for(const n of this._listeners)this._connectListener(n)}else d.close()}),this._promise.catch(d=>M.error(`Failed to initialize ${e} worker: ${d}`))}on(e,t){const s={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(s),this._connectListener(s),w(()=>{s.removed=!0,S(this._listeners,s),this._thread&&p(s.threadHandle)&&s.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,s){if(this._thread){const l=this._transferLists[e],h=l?l(t):[];return this._thread.invoke(e,t,{transferList:h,signal:s})}return this._promise?this._promise.then(()=>(u(s),this.invokeMethod(e,t,s))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}class v extends U{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,s){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},s):Promise.resolve(null)}release(){--this.ref<=0&&(c.forEach((e,t)=>{e===this&&c.delete(t)}),this.destroy())}}const c=new Map;function N(r=null){let e=c.get($(r));return e||(p(r)?(e=new v(t=>r.schedule(t)),c.set(r,e)):(e=new v,c.set(null,e))),++e.ref,e}const _=g.getLogger("esri.layers.ElevationLayer");let i=class extends C(T(b(L(I(A))))){constructor(...r){super(...r),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=N()}normalizeCtorArgs(r,e){return typeof r=="string"?{url:r,...e}:r}destroy(){this._lercDecoder=x(this._lercDecoder)}set minScale(r){this.constructed&&_.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`)}get minScale(){}set maxScale(r){this.constructed&&_.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`)}get maxScale(){}readVersion(r,e){let t=e.currentVersion;return t||(t=9.3),t}load(r){const e=p(r)?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let s=0;s<t.typeKeywords.length;s++)if(t.typeKeywords[s].toLowerCase()==="elevation 3d layer")return!0;throw new E("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},r).catch(D).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(r,e,t,s){const l=p((s=s||{signal:null}).signal)?s.signal:s.signal=new AbortController().signal,h={responseType:"array-buffer",signal:l},d={noDataValue:s.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(r,e,t,s)).then(()=>y(this.getTileUrl(r,e,t),h)).then(n=>this._lercDecoder.decode(n.data,d,l)).then(n=>({values:n.pixelData,width:n.width,height:n.height,maxZError:n.fileInfo.maxZError,noDataValue:n.noDataValue,minValue:n.minValue,maxValue:n.maxValue}))}getTileUrl(r,e,t){const s=!this.tilemapCache&&this.supportsBlankTile,l=k({...this.parsedUrl.query,blankTile:!s&&null});return`${this.parsedUrl.path}/tile/${r}/${e}/${t}${l?"?"+l:""}`}async queryElevation(r,e){const{ElevationQuery:t}=await m(()=>import("./ElevationQuery.950eb067.js"),["ElevationQuery.950eb067.js","index.a831a68c.js","index.454cc923.css"],import.meta.url);return u(e),new t().query(this,r,e)}async createElevationSampler(r,e){const{ElevationQuery:t}=await m(()=>import("./ElevationQuery.950eb067.js"),["ElevationQuery.950eb067.js","index.a831a68c.js","index.454cc923.css"],import.meta.url);return u(e),new t().createSampler(this,r,e)}_fetchTileAvailability(r,e,t,s){return this.tilemapCache?this.tilemapCache.fetchAvailability(r,e,t,s):Promise.resolve("unknown")}async _fetchImageService(r){if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:r},t=await y(this.parsedUrl.path,e);t.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};a([o({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),a([o({readOnly:!0,type:P})],i.prototype,"heightModelInfo",void 0),a([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),a([o({type:["show","hide"]})],i.prototype,"listMode",void 0),a([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],i.prototype,"minScale",null),a([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],i.prototype,"maxScale",null),a([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],i.prototype,"opacity",void 0),a([o({type:["ArcGISTiledElevationServiceLayer"]})],i.prototype,"operationalLayerType",void 0),a([o()],i.prototype,"sourceJSON",void 0),a([o({json:{read:!1},value:"elevation",readOnly:!0})],i.prototype,"type",void 0),a([o(O)],i.prototype,"url",void 0),a([o()],i.prototype,"version",void 0),a([V("version",["currentVersion"])],i.prototype,"readVersion",null),i=a([j("esri.layers.ElevationLayer")],i),i.prototype.fetchTile.__isDefault__=!0;const q=i;export{q as default};
